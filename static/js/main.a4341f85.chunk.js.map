{"version":3,"sources":["components/block.jsx","components/platform.jsx","serviceWorker.js","index.js"],"names":["Block","result","destination","droppableId","this","props","blockId","direction","provided","snapshot","droppableProps","ref","innerRef","style","isDraggingOver","background","display","flexWrap","items","map","item","index","key","id","draggableId","className","draggableProps","dragHandleProps","isDragging","draggableStyle","placeholder","React","Component","getItemsArray","arrayCount","arr","i","getItems","count","num","Array","from","length","v","k","moveCount","Platform","state","platformOnDragEnd","onDragEnd","bind","source","list","startIndex","endIndex","splice","removed","reorder","setState","movingItem","indexOf","moveBetweenGroups","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a4341f85.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/block.css\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\"\r\n});\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n\r\n  // change background colour if dragging\r\n  //background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nexport default class Block extends React.Component {\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Droppable droppableId={this.props.blockId} direction=\"horizontal\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n            >\r\n              {this.props.items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      className={item.className}\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    ></div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Block from \"./block\";\r\nimport \"../styles/platform.css\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nconst getItemsArray = arrayCount => {\r\n  let arr = [];\r\n  for (let i = 0; i < arrayCount; i++) {\r\n    arr[i] = getItems(4, i);\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst getItems = (count, num) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${num}-${num * 10 + k}`,\r\n    className: `puzzle piece${num * 10 + k}`\r\n  }));\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nlet moveCount = 0;\r\n\r\nconst moveBetweenGroups = (items, result) => {\r\n  const movingItem = items[result.source.droppableId].splice(\r\n    items[result.source.droppableId].indexOf(\r\n      items[result.source.droppableId][result.source.index]\r\n    ),\r\n    1\r\n  );\r\n  items[result.destination.droppableId].splice(\r\n    result.destination.index,\r\n    0,\r\n    movingItem[0]\r\n  );\r\n};\r\n\r\nclass Platform extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: getItemsArray(2),\r\n      platformOnDragEnd: props.onDragEnd,\r\n      moveCount: moveCount\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    moveCount++;\r\n    if (result.destination.droppableId === result.source.droppableId) {\r\n      const items = this.state.items;\r\n      const item = reorder(\r\n        this.state.items[result.source.droppableId],\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n      items[result.source.droppableId] = item;\r\n      this.setState({\r\n        items,\r\n        moveCount\r\n      });\r\n    } else {\r\n      const items = this.state.items;\r\n      moveBetweenGroups(items, result);\r\n      this.setState({\r\n        items,\r\n        moveCount\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pad\">\r\n        <div className=\"headerContainer\">\r\n          <h1>Jigsaw</h1>\r\n          <h2>Number of moves: {this.state.moveCount}</h2>\r\n        </div>\r\n        <div className=\"container\">\r\n          <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Block items={this.state.items[0]} blockId={\"0\"} />\r\n            <Block items={this.state.items[1]} blockId={\"1\"} />\r\n          </DragDropContext>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Platform;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Platform from \"./components/platform\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Platform />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}